str(all.lines.21)
#stock as factor
all.lines.21$stock<-as.factor(all.lines.21$stock)
#transform minutes in log10-scale to minutes
all.lines.21$surv.time2<-as.numeric(10^(all.lines.21$surv.time))
# subset by sex
male <- subset (all.lines.21, all.lines.21$sex == "male")
female <- subset (all.lines.21, all.lines.21$sex != "male")
# ------------------------------------------------------------------------------
# I just copied below the reviewer comment to understand better what he/she wants
# I thought it would be helpful to report the variance associated with the
# estimates of CTmax and z, especially because the authors are using linear
# regression that extrapolates beyond the range of measurements. The authors
# calculated the standard error across all lines measured, but I think it would
# be more informative to report the standard error of each line (and if possible,
# incorporate this uncertainty in downstream analyses). The model output should
# report the standard errors associated with B0 and B1, and there should also be
# a way to calculate the standard error associated with an estimated value
# derived from the model (i.e., the CTmax estimate). Reporting these standard
# errors, and/or confidence intervals for each estimate, would help indicate the
# precision of these estimates within each line.
# To address the reviewer's comment, we can calculate and report the standard
# errors and confidence intervals for CTmax and z for each DGRP line. Here's how
# we can modify the analysis to include this information:
# First, let's create a function to fit the model and extract coefficients along with their standard errors:
TDT_curve_with_se <- function(df) {
model <- lm(surv.time ~ test.temp, data = df)
coef_summary <- summary(model)$coefficients
b0 <- coef_summary[1, 1]    # extract intercept
b1 <- coef_summary[2, 1]    # extract slope
se_b0 <- coef_summary[1, 2] # extract SE intercept
se_b1 <- coef_summary[2, 2] # extract SE slope
# # Calculate CTmax and its standard error using the delta method. More of the delta methods can be found here:
# https://bookdown.org/ts_robinson1994/10EconometricTheorems/dm.html#applied-example
ctmax <- -b0 / b1
se_ctmax <- deltamethod(~ -x1/x2, c(b0, b1), vcov(model))
# Calculate z and its standard error
z <- -1 / b1
se_z <- deltamethod(~ -1/x2, c(b0, b1), vcov(model))
data.frame(
b0 = round(b0, 4),
se_b0 = round(se_b0, 4),
b1 = round(b1, 4),
se_b1 = round(se_b1, 4),
CTmax = round(ctmax, 4),
se_CTmax = round(se_ctmax, 4),
z = round(z, 4),
se_z = round(se_z, 4)
)
}
#  Now lets apply this function to our data:
# for females
results_female_OLR <- female %>%
group_by(genotype) %>%
do(TDT_curve_with_se(.)) %>%
ungroup()
# for males
results_male_OLR <- male %>%
group_by(genotype) %>%
do(TDT_curve_with_se(.)) %>%
ungroup()
# Calculate 95% confidence intervals:
calculate_ci <- function(estimate, se) {
lower <- estimate - 1.96 * se
upper <- estimate + 1.96 * se
paste0("[", round(lower, 4), ", ", round(upper, 4), "]")
}
results_female_OLR <- results_female_OLR %>%
mutate(
CI_CTmax = calculate_ci(CTmax, se_CTmax),
CI_z = calculate_ci(z, se_z)
)
results_male_OLR <- results_male_OLR %>%
mutate(
CI_CTmax = calculate_ci(CTmax, se_CTmax),
CI_z = calculate_ci(z, se_z)
)
# Create and export Table S2:
names(results_female_OLR) <- c("DGRP line",
"b0_female", "se_b0_female", "b1_female", "se_b1_female",
"CTmax_female", "se_CTmax_female", "z_female", "se_z_female",
"CI_CTmax_female", "CI_z_female")
names(results_male_OLR) <- c("DGRP line_male",
"b0_male", "se_b0_male", "b1_male", "se_b1_male",
"CTmax_male", "se_CTmax_male", "z_male", "se_z_male",
"CI_CTmax_male", "CI_z_male")
TableS2 <- cbind(results_female_OLR, results_male_OLR)
names(TableS2)
select_columns <- c("DGRP line",
"b0_female", "se_b0_female", "b1_female", "se_b1_female",
"CTmax_female", "se_CTmax_female", "z_female", "se_z_female",
"CI_CTmax_female", "CI_z_female",
"b0_male", "se_b0_male", "b1_male", "se_b1_male",
"CTmax_male", "se_CTmax_male", "z_male", "se_z_male",
"CI_CTmax_male", "CI_z_male"
)
# Seleccionar las columnas
TableS2 <- TableS2[, select_columns]
write.csv(TableS2, "../Outputs/Table_S2_CTmax_and_z_per_DGRP_line_and_sex_with_SE_and_CI.csv", row.names = FALSE)
# ------------------------------------------------------------------------------
# This script estimate CTmax and z for after fitting a linear model of survival
# time and test temperature for each DGRP line and sex as well as their errors
# and CI for both estimates, for each genotype and sex. I hope this code will be
# useful to other as well working in similar subjects
# ------------------------------------------------------------------------------
# Script created by Felix P. Leiva
# Created on: 20241107
# Modifications: XXXXX by YYYYYYY
# If you use it, please cite as:
# Leiva FP, Santos M, Niklitschek EJ, Rezende EL, & Verberk WCEP. (2024). Paper
# data and code for: Genetic variation of heat tolerance in a model ectotherm:
# an approach using thermal death time curves. Zenodo.
# https://doi.org/10.5281/zenodo.12155988.
# Cleaning working space
rm(list=ls())
set.seed(6955)
# check directory
getwd()
# ------------------------------------------------------------------------------
#Libraries
library(dplyr)
library(MASS)
library(broom)
library(ggplot2)
library(msm)  # For deltamethod function
library(boot) # For bootstrap
# ------------------------------------------------------------------------------
# Load data of the 20 DGRP lines ####
all.lines.21<-read.csv("../Outputs/0.1.1. Survival time of Drosophila melanogaster across DGRP lines.csv")
# check data structure
str(all.lines.21)
#stock as factor
all.lines.21$stock<-as.factor(all.lines.21$stock)
#transform minutes in log10-scale to minutes
all.lines.21$surv.time2<-as.numeric(10^(all.lines.21$surv.time))
# subset by sex
male <- subset (all.lines.21, all.lines.21$sex == "male")
female <- subset (all.lines.21, all.lines.21$sex != "male")
# ------------------------------------------------------------------------------
# I just copied below the reviewer comment to understand better what he/she wants
# I thought it would be helpful to report the variance associated with the
# estimates of CTmax and z, especially because the authors are using linear
# regression that extrapolates beyond the range of measurements. The authors
# calculated the standard error across all lines measured, but I think it would
# be more informative to report the standard error of each line (and if possible,
# incorporate this uncertainty in downstream analyses). The model output should
# report the standard errors associated with B0 and B1, and there should also be
# a way to calculate the standard error associated with an estimated value
# derived from the model (i.e., the CTmax estimate). Reporting these standard
# errors, and/or confidence intervals for each estimate, would help indicate the
# precision of these estimates within each line.
# To address the reviewer's comment, we can calculate and report the standard
# errors and confidence intervals for CTmax and z for each DGRP line. Here's how
# we can modify the analysis to include this information:
# First, let's create a function to fit the model and extract coefficients along with their standard errors:
TDT_curve_with_se <- function(df) {
model <- lm(surv.time ~ test.temp, data = df)
coef_summary <- summary(model)$coefficients
b0 <- coef_summary[1, 1]    # extract intercept
b1 <- coef_summary[2, 1]    # extract slope
se_b0 <- coef_summary[1, 2] # extract SE intercept
se_b1 <- coef_summary[2, 2] # extract SE slope
# # Calculate CTmax and its standard error using the delta method. More of the delta methods can be found here:
# https://bookdown.org/ts_robinson1994/10EconometricTheorems/dm.html#applied-example
ctmax <- -b0 / b1
se_ctmax <- deltamethod(~ -x1/x2, c(b0, b1), vcov(model))
# Calculate z and its standard error
z <- -1 / b1
se_z <- deltamethod(~ -1/x2, c(b0, b1), vcov(model))
data.frame(
b0 = round(b0, 4),
se_b0 = round(se_b0, 4),
b1 = round(b1, 4),
se_b1 = round(se_b1, 4),
CTmax = round(ctmax, 4),
se_CTmax = round(se_ctmax, 4),
z = round(z, 4),
se_z = round(se_z, 4)
)
}
#  Now lets apply this function to our data:
# for females
results_female_OLR <- female %>%
group_by(genotype) %>%
do(TDT_curve_with_se(.)) %>%
ungroup()
# for males
results_male_OLR <- male %>%
group_by(genotype) %>%
do(TDT_curve_with_se(.)) %>%
ungroup()
# Calculate 95% confidence intervals:
calculate_ci <- function(estimate, se) {
lower <- estimate - 1.96 * se
upper <- estimate + 1.96 * se
paste0("[", round(lower, 4), ", ", round(upper, 4), "]")
}
results_female_OLR <- results_female_OLR %>%
mutate(
CI_CTmax = calculate_ci(CTmax, se_CTmax),
CI_z = calculate_ci(z, se_z)
)
results_male_OLR <- results_male_OLR %>%
mutate(
CI_CTmax = calculate_ci(CTmax, se_CTmax),
CI_z = calculate_ci(z, se_z)
)
# Create and export Table S2:
names(results_female_OLR) <- c("DGRP line",
"b0_female", "se_b0_female", "b1_female", "se_b1_female",
"CTmax_female", "se_CTmax_female", "z_female", "se_z_female",
"CI_CTmax_female", "CI_z_female")
names(results_male_OLR) <- c("DGRP line_male",
"b0_male", "se_b0_male", "b1_male", "se_b1_male",
"CTmax_male", "se_CTmax_male", "z_male", "se_z_male",
"CI_CTmax_male", "CI_z_male")
TableS2 <- cbind(results_female_OLR, results_male_OLR)
names(TableS2)
select_columns <- c("DGRP line",
"b0_female", "se_b0_female", "b1_female", "se_b1_female",
"CTmax_female", "se_CTmax_female", "z_female", "se_z_female",
"CI_CTmax_female", "CI_z_female",
"b0_male", "se_b0_male", "b1_male", "se_b1_male",
"CTmax_male", "se_CTmax_male", "z_male", "se_z_male",
"CI_CTmax_male", "CI_z_male"
)
View(TableS2)
# Cleaning working space
rm(list=ls())
set.seed(42)
# check directory
getwd()
# ------------------------------------------------------------------------------
#Libraries
library(car)
library(lme4)
library(MuMIn)
library(dplyr)
library(nlme)
# +++++++++++++++++++++++++++++++++++++++
#### Load data of the 20 DGRP lines ####
all.lines.21<-read.csv("../Outputs/0.1.1. Survival time of Drosophila melanogaster across DGRP lines.csv")
# check data structure
str(all.lines.21)
#stock as factor
all.lines.21$stock<-as.factor(all.lines.21$stock)
#transform minutes in log10-scale to minutes
all.lines.21$surv.time2<-as.numeric(10^(all.lines.21$surv.time))
# subset by sex
names(all.lines.21)[c(14,5,2)]=c("Survtime","Testtemp","Genotype")
Data_females<-subset(all.lines.21,sex=="female") #females
Data_males<-subset(all.lines.21,sex=="male") #males
n_0Females <- 10.2479840885613
n_0Males = 10.8054730372430
#### Ancova ####
ancova=function(data,n_0){
ancova1=lm(Survtime ~ -1+Genotype/Testtemp, data = data)
# Extract coefficients
coefficients <- summary(ancova1)$coefficients
# Intercepts and slopes
intercepts <- coefficients[1:length(unique(data$Genotype)), "Estimate"]
slopes <- coefficients[(length(unique(data$Genotype))+1):(length(unique(data$Genotype))*2), "Estimate"]
Mean_b0 = mean(intercepts); Mean_b1 = mean(slopes);
# Calculos
vr=matrix(c(var(intercepts),rep(cov(intercepts,slopes),2),var(slopes)),nr=2)
# Replicando a Mauro
Mean_b0F = mean(intercepts); Mean_b1F = mean(slopes);
Var_b0F = as.numeric(vr[1,1]); Var_b1F = as.numeric(vr[2,2]);
Cov_b0F_b1F = as.numeric(vr[2,1])
Var_eF = sigma(ancova1)^2;
# Calculate variance components
Var_CTmaxF <- ((Mean_b0F)^2 / (Mean_b1F)^2) *
(Var_b0F/(Mean_b0F)^2 - (2 * Cov_b0F_b1F / (Mean_b0F * Mean_b1F)) + Var_b1F/(Mean_b1F)^2)
Var_zF <- Var_b1F / (Mean_b1F)^4
# Calculate heritability estimates
n_0
H2_CTmaxF <- Var_CTmaxF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
H2_zF <- Var_zF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
as.data.frame(t(data.frame(Var_b0F, Var_b1F, Cov_b0F_b1F, Var_eF, Var_CTmaxF, Var_zF, H2_CTmaxF, H2_zF)))
}
#### Funcion LME ####
lme2=function(data,n_0,method){
#1. All data estimates
lme.f <- lme(Survtime ~ Testtemp,random=list(~Testtemp|Genotype,~1|Genotype), data = data, method=method,control = lmeControl(maxiter=1000) )
(vr=VarCorr(lme.f))
# Replicando a Mauro
Mean_b0F = fixef(lme.f)[1]; Mean_b1F = fixef(lme.f)[2];
Var_b0F = as.numeric(vr[2,1]); Var_b1F = as.numeric(vr[3,1]);
Cov_b0F_b1F = as.numeric(vr[2,2])*as.numeric(vr[3,2])*as.numeric(vr[3,3])
Var_eF = sigma(lme.f)^2;
# Calculate variance components
Var_CTmaxF <- ((Mean_b0F)^2 / (Mean_b1F)^2) *
(Var_b0F/(Mean_b0F)^2 - (2 * Cov_b0F_b1F / (Mean_b0F * Mean_b1F)) + Var_b1F/(Mean_b1F)^2)
Var_zF <- Var_b1F / (Mean_b1F)^4
# Calculate heritability estimates
n_0
H2_CTmaxF <- Var_CTmaxF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
H2_zF <- Var_zF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
as.data.frame(t(data.frame(Var_b0F, Var_b1F, Cov_b0F_b1F, Var_eF, Var_CTmaxF, Var_zF, H2_CTmaxF, H2_zF)))
}
### Funcion Jacknife ####
jk=function(data,n_0,method,funcion){
if(funcion=="ancova"){
jk.all=ancova(data = data,n_0=n_0)
} else {if(funcion=="lme") jk.all=lme2(data=data,n_0=n_0,method=method) else {
print('Incorrect function specification. Must be either "ancova" or "lme"')}}
jk.i=do.call("cbind",lapply(unique(data$Genotype), function(i){
data.i=subset(data,Genotype!=i)
if(funcion=="ancova"){
ancova(data = data.i,n_0=n_0)
} else {if(funcion=="lme") lme2(data=data.i,n_0=n_0,method=method) else {
print('Incorrect function specification. Must be either "ancova" or "lme"')}}
}))
ndata=length(unique(data$Genotype))
pseudo.values=do.call("cbind",apply(jk.i,2,function(i) ndata*jk.all-(ndata-1)*i))
Jack_estimates=matrix(rowMeans(pseudo.values),nc=1)
#dv.i=do.call("cbind",apply(pseudo.values,1, function(i) i-jk.all))
dv.i=apply(pseudo.values,2, function(i) i-Jack_estimates)
SE=sqrt(rowSums(dv.i^2)/(ndata*(ndata-1)))
low = Jack_estimates - 2*SE;
up = Jack_estimates + 2*SE;
jk=(data.frame(Jacknife=Jack_estimates,low,up))
}
#### Aplica funciones hembras ####
#Hembras Ancova
females.ancova=ancova(data = Data_females,n_0=n_0Females)
females.jk.ancova=jk(data=Data_females,n_0=n_0Females,funcion = "ancova")
females.ancova=cbind(females.ancova,females.jk.ancova)
#Hembras ML
females.est.ML=lme2(data = Data_females,n_0=n_0Females,method="ML")
females.jk.ML=jk(data=Data_females,n_0=n_0Females,method="ML",funcion = "lme")
females.ML=cbind(females.est.ML,females.jk.ML)
#Hembras REML
females.est.REML=lme2(data = Data_females,n_0=n_0Females,method="REML")
females.jk.REML=jk(data=Data_females,n_0=n_0Females,method="REML",funcion="lme")
females.REML=cbind(females.est.REML,females.jk.REML)
#### Aplica funciones machos ####
#Machos Ancova
males.ancova=ancova(data = Data_males,n_0=n_0Males)
males.jk.ancova=jk(data=Data_males,n_0=n_0Males,funcion = "ancova")
males.ancova=cbind(males.ancova,males.jk.ancova)
#Machos ML
males.est.ML=lme2(data = Data_males,n_0=n_0Males,method="ML")
males.jk.ML=jk(data=Data_males,n_0=n_0Males,method="ML",funcion="lme")
males.ML=cbind(males.est.ML,males.jk.ML)
#Machos REML
males.est.REML=lme2(data = Data_males,n_0=n_0Males,method="REML")
males.jk.REML=jk(data=Data_males,n_0=n_0Males,method="REML",funcion="lme")
males.REML=cbind(males.est.REML,males.jk.REML)
# combine
ancova <- cbind(females.ancova, males.ancova)
ML     <- cbind(females.ML, males.ML)
REML   <- cbind(females.REML, males.REML)
names(ancova)
colnames(ancova) <- c("Female_estimate", "Females_Jacknife", "Females_low_95%_CI", "Females_up_95%_CI",
"Males_estimate", "Males_Jacknife", "Males_low_95%_CI", "Males_up_95%_CI")
ancova$Method <- "Anova"
names(ML)
colnames(ML) <- c("Female_estimate", "Females_Jacknife", "Females_low_95%_CI", "Females_up_95%_CI",
"Males_estimate", "Males_Jacknife", "Males_low_95%_CI", "Males_up_95%_CI")
ML$Method <- "ML"
names(REML)
colnames(REML) <- c("Female_estimate", "Females_Jacknife", "Females_low_95%_CI", "Females_up_95%_CI",
"Males_estimate", "Males_Jacknife", "Males_low_95%_CI", "Males_up_95%_CI")
REML$Method <- "REML"
# Combine and export to csv
Table_S1 <- rbind(ancova, ML, REML)
View(Table_S1)
# Cleaning working space
rm(list=ls())
set.seed(42)
# check directory
getwd()
# ------------------------------------------------------------------------------
#Libraries
library(car)
library(lme4)
library(MuMIn)
library(dplyr)
library(nlme)
# +++++++++++++++++++++++++++++++++++++++
#### Load data of the 20 DGRP lines ####
all.lines.21<-read.csv("../Outputs/0.1.1. Survival time of Drosophila melanogaster across DGRP lines.csv")
# check data structure
str(all.lines.21)
#stock as factor
all.lines.21$stock<-as.factor(all.lines.21$stock)
#transform minutes in log10-scale to minutes
all.lines.21$surv.time2<-as.numeric(10^(all.lines.21$surv.time))
# subset by sex
names(all.lines.21)[c(14,5,2)]=c("Survtime","Testtemp","Genotype")
Data_females<-subset(all.lines.21,sex=="female") #females
Data_males<-subset(all.lines.21,sex=="male") #males
n_0Females <- 10.2479840885613
n_0Males = 10.8054730372430
#### Ancova ####
ancova=function(data,n_0){
ancova1=lm(Survtime ~ -1+Genotype/Testtemp, data = data)
# Extract coefficients
coefficients <- summary(ancova1)$coefficients
# Intercepts and slopes
intercepts <- coefficients[1:length(unique(data$Genotype)), "Estimate"]
slopes <- coefficients[(length(unique(data$Genotype))+1):(length(unique(data$Genotype))*2), "Estimate"]
Mean_b0 = mean(intercepts); Mean_b1 = mean(slopes);
# Calculos
vr=matrix(c(var(intercepts),rep(cov(intercepts,slopes),2),var(slopes)),nr=2)
# Replicando a Mauro
Mean_b0F = mean(intercepts); Mean_b1F = mean(slopes);
Var_b0F = as.numeric(vr[1,1]); Var_b1F = as.numeric(vr[2,2]);
Cov_b0F_b1F = as.numeric(vr[2,1])
Var_eF = sigma(ancova1)^2;
# Calculate variance components
Var_CTmaxF <- ((Mean_b0F)^2 / (Mean_b1F)^2) *
(Var_b0F/(Mean_b0F)^2 - (2 * Cov_b0F_b1F / (Mean_b0F * Mean_b1F)) + Var_b1F/(Mean_b1F)^2)
Var_zF <- Var_b1F / (Mean_b1F)^4
# Calculate heritability estimates
n_0
H2_CTmaxF <- Var_CTmaxF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
H2_zF <- Var_zF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
as.data.frame(t(data.frame(Var_b0F, Var_b1F, Cov_b0F_b1F, Var_eF, Var_CTmaxF, Var_zF, H2_CTmaxF, H2_zF)))
}
#### Funcion LME ####
lme2=function(data,n_0,method){
#1. All data estimates
lme.f <- lme(Survtime ~ Testtemp,random=list(~Testtemp|Genotype,~1|Genotype), data = data, method=method,control = lmeControl(maxiter=1000) )
(vr=VarCorr(lme.f))
# Replicando a Mauro
Mean_b0F = fixef(lme.f)[1]; Mean_b1F = fixef(lme.f)[2];
Var_b0F = as.numeric(vr[2,1]); Var_b1F = as.numeric(vr[3,1]);
Cov_b0F_b1F = as.numeric(vr[2,2])*as.numeric(vr[3,2])*as.numeric(vr[3,3])
Var_eF = sigma(lme.f)^2;
# Calculate variance components
Var_CTmaxF <- ((Mean_b0F)^2 / (Mean_b1F)^2) *
(Var_b0F/(Mean_b0F)^2 - (2 * Cov_b0F_b1F / (Mean_b0F * Mean_b1F)) + Var_b1F/(Mean_b1F)^2)
Var_zF <- Var_b1F / (Mean_b1F)^4
# Calculate heritability estimates
n_0
H2_CTmaxF <- Var_CTmaxF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
H2_zF <- Var_zF / (Var_CTmaxF + Var_zF + Var_eF / n_0)
as.data.frame(t(data.frame(Var_b0F, Var_b1F, Cov_b0F_b1F, Var_eF, Var_CTmaxF, Var_zF, H2_CTmaxF, H2_zF)))
}
### Funcion Jacknife ####
jk=function(data,n_0,method,funcion){
if(funcion=="ancova"){
jk.all=ancova(data = data,n_0=n_0)
} else {if(funcion=="lme") jk.all=lme2(data=data,n_0=n_0,method=method) else {
print('Incorrect function specification. Must be either "ancova" or "lme"')}}
jk.i=do.call("cbind",lapply(unique(data$Genotype), function(i){
data.i=subset(data,Genotype!=i)
if(funcion=="ancova"){
ancova(data = data.i,n_0=n_0)
} else {if(funcion=="lme") lme2(data=data.i,n_0=n_0,method=method) else {
print('Incorrect function specification. Must be either "ancova" or "lme"')}}
}))
ndata=length(unique(data$Genotype))
pseudo.values=do.call("cbind",apply(jk.i,2,function(i) ndata*jk.all-(ndata-1)*i))
Jack_estimates=matrix(rowMeans(pseudo.values),nc=1)
#dv.i=do.call("cbind",apply(pseudo.values,1, function(i) i-jk.all))
dv.i=apply(pseudo.values,2, function(i) i-Jack_estimates)
SE=sqrt(rowSums(dv.i^2)/(ndata*(ndata-1)))
low = Jack_estimates - 2*SE;
up = Jack_estimates + 2*SE;
jk=(data.frame(Jacknife=Jack_estimates,low,up))
}
#### Aplica funciones hembras ####
#Hembras Ancova
females.ancova=ancova(data = Data_females,n_0=n_0Females)
females.jk.ancova=jk(data=Data_females,n_0=n_0Females,funcion = "ancova")
females.ancova=cbind(females.ancova,females.jk.ancova)
#Hembras ML
females.est.ML=lme2(data = Data_females,n_0=n_0Females,method="ML")
females.jk.ML=jk(data=Data_females,n_0=n_0Females,method="ML",funcion = "lme")
females.ML=cbind(females.est.ML,females.jk.ML)
#Hembras REML
females.est.REML=lme2(data = Data_females,n_0=n_0Females,method="REML")
females.jk.REML=jk(data=Data_females,n_0=n_0Females,method="REML",funcion="lme")
females.REML=cbind(females.est.REML,females.jk.REML)
#### Aplica funciones machos ####
#Machos Ancova
males.ancova=ancova(data = Data_males,n_0=n_0Males)
males.jk.ancova=jk(data=Data_males,n_0=n_0Males,funcion = "ancova")
males.ancova=cbind(males.ancova,males.jk.ancova)
#Machos ML
males.est.ML=lme2(data = Data_males,n_0=n_0Males,method="ML")
males.jk.ML=jk(data=Data_males,n_0=n_0Males,method="ML",funcion="lme")
males.ML=cbind(males.est.ML,males.jk.ML)
#Machos REML
males.est.REML=lme2(data = Data_males,n_0=n_0Males,method="REML")
males.jk.REML=jk(data=Data_males,n_0=n_0Males,method="REML",funcion="lme")
males.REML=cbind(males.est.REML,males.jk.REML)
# combine
ancova <- cbind(females.ancova, males.ancova)
ML     <- cbind(females.ML, males.ML)
REML   <- cbind(females.REML, males.REML)
names(ancova)
colnames(ancova) <- c("Female_estimate", "Females_Jacknife", "Females_low_95%_CI", "Females_up_95%_CI",
"Males_estimate", "Males_Jacknife", "Males_low_95%_CI", "Males_up_95%_CI")
ancova$Method <- "Anova"
names(ML)
colnames(ML) <- c("Female_estimate", "Females_Jacknife", "Females_low_95%_CI", "Females_up_95%_CI",
"Males_estimate", "Males_Jacknife", "Males_low_95%_CI", "Males_up_95%_CI")
ML$Method <- "ML"
names(REML)
colnames(REML) <- c("Female_estimate", "Females_Jacknife", "Females_low_95%_CI", "Females_up_95%_CI",
"Males_estimate", "Males_Jacknife", "Males_low_95%_CI", "Males_up_95%_CI")
REML$Method <- "REML"
# Combine and export to csv
Table_S1 <- rbind(ancova, ML, REML)
View(Table_S1)
# Combine and export to csv
Table_S1 <- rbind(ancova, ML, REML)
write.csv(Table_S1, "../Outputs/Estimates of variance-covariance components and broad-sense heritability DGRP lines (Table_S1).csv", row.names = TRUE)
